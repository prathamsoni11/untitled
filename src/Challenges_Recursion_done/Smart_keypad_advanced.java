package Challenges_Recursion_done;

public class Smart_keypad_advanced {
    /*

Given a long vector of strings, print the strings that contain the strings generated by numeric string str.

string searchIn [] = {
            "prateek", "sneha", "deepak", "arnav", "shikha", "palak",
            "utkarsh", "divyam", "vidhi", "sparsh", "akku"
    };

For example, if the input is 26 and the string is coding, then output should be coding since 26 can produce co which is contained in coding.
*/

    static String table[] = { " ", ".+@$", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz" };

    private static final String[] searchIn = { "prateek", "sneha", "deepak", "arnav", "shikha", "palak", "utkarsh",
            "divyam", "vidhi", "sparsh", "akku" };

    public static void keypad1(String ques, String ans) {

        if (ques.length() == 0) {
            for (String ss : searchIn) {
                if (ss.contains(ans)) {
                    System.out.println(ss);
                }
            }

            return;
        }

        char ch = ques.charAt(0);
        String ros = ques.substring(1);
        String code = table[ch - '0'];

        for (int i = 0; i < code.length(); i++)
            keypad1(ros, ans + code.charAt(i));

    }

    public static void main(String[] args) {
        keypad1("34","");

        // 34
    }
}
